/**
 * Copyright (c) 2013-2015, FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, 
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice, 
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice, 
 *      this list of conditions and the following disclaimer in the documentation 
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors 
 *      may be used to endorse or promote products derived from this software without 
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**/

/**
 * Selector encapsulates queries arund the User object, currently limited to needs around email, hence reduced scope
 **/
public class UsersSelector extends fflib_SObjectSelector
	implements IUsersSelector
{
	public static IUsersSelector newInstance()
	{
		return (IUsersSelector) Application.Selector.newInstance(User.SObjectType);
	}
		
	public List<Schema.SObjectField> getSObjectFieldList()
	{
		// Current app requirements driven soley by getUsersEmail at this stage
		return new List<Schema.SObjectField> { User.Email };
	}

	public Schema.SObjectType getSObjectType()
	{
		return User.sObjectType;
	}
	
	/**
	 * Queries given user records and maps the user Ids to assigned email addresses
	 **/		
	public Map<Id, String> getUsersEmail(Set<Id> userIds)
	{
		List<User> users = selectSObjectsById(userIds);	
		Map<Id, String> emailsById = new Map<Id, String>();
		for(User user : users)
			emailsById.put(user.Id, user.Email);
		return emailsById;	
	}
}